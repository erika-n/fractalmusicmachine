Here is some pseudocode in pseudolanguage to help understand what is going on/aid translation to other languages. 

// Define some line objects. These lines represent notes defined over 0-1, where 0-1 can be any length of time you like. 
lines = [
    {start = 0, end = 0.5, freq =4}, 
    {start = 0.5, end = 1, freq = 3},
    {start = 0.25, end = 0.75, freq = 6}
];


/// Transform the recursing line via the original lines (linear transformation)

function doTransform(line, transform){
    newline = new line;
  
    len = line.end - line.start;
    newline.start = transform.start*len + line.start;
    newline.end = transform.end*len + line.start;     
      
    newline.freq = line.freq*transform.freq; // Frequency gets multiplied. Try experimenting with other things!
    return newline;
}

// Recursively apply the algorithm to them.

function run(line, lines, depth){
    if(depth <= 0){
        // When the bottom of the recursion is hit, write out the note to the sound buffer.
		// writeOscillations should write some sounds of the appropriate scaled frequency to a sound
        // buffer somewhere. 
		writeOscillations(line.start, line.end, line.freq);
    }
    else{
        foreach(transform in lines){
            newline = doTransform(line, transform);
            run(newline, lines, depth - 1);              
        }	
    }
}




 

// Use it like this

originalLine = {start = 0, end = 1};
run(originalLine, lines, 3);
write out soundbuffer to a file;
